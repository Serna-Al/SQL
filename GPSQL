-- Tabla para almacenar la información de los usuarios
CREATE TABLE Usuarios (
    UsuarioID INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(100) NOT NULL,
    Apellido VARCHAR(100) NOT NULL,
    FechaNacimiento DATE,
    CorreoElectronico VARCHAR(100) UNIQUE,
    Telefono VARCHAR(15),
    FechaRegistro DATE NOT NULL DEFAULT CURRENT_DATE
);

-- Tabla para almacenar los tipos de membresías
CREATE TABLE Membresias (
    MembresiaID INT PRIMARY KEY AUTO_INCREMENT,
    TipoMembresia VARCHAR(50) NOT NULL,
    DuracionDias INT NOT NULL, -- Duración de la membresía en días
    Costo DECIMAL(10, 2) NOT NULL
);

-- Tabla para almacenar los pagos de membresías
CREATE TABLE Pagos (
    PagoID INT PRIMARY KEY AUTO_INCREMENT,
    UsuarioID INT,
    MembresiaID INT,
    FechaPago DATE NOT NULL DEFAULT CURRENT_DATE,
    MontoPagado DECIMAL(10, 2) NOT NULL,
    FechaExpiracion DATE NOT NULL,
    FOREIGN KEY (UsuarioID) REFERENCES Usuarios(UsuarioID),
    FOREIGN KEY (MembresiaID) REFERENCES Membresias(MembresiaID)
);

-- Tabla para registrar las asistencias al gimnasio
CREATE TABLE Asistencias (
    AsistenciaID INT PRIMARY KEY AUTO_INCREMENT,
    UsuarioID INT,
    FechaAsistencia DATE NOT NULL DEFAULT CURRENT_DATE,
    HoraAsistencia TIME NOT NULL DEFAULT CURRENT_TIME,
    FOREIGN KEY (UsuarioID) REFERENCES Usuarios(UsuarioID)
);

-- Consulta para ver todas las membresías activas de un usuario
SELECT 
    u.Nombre, 
    u.Apellido, 
    m.TipoMembresia, 
    p.FechaPago, 
    p.FechaExpiracion 
FROM 
    Pagos p
JOIN 
    Usuarios u ON p.UsuarioID = u.UsuarioID
JOIN 
    Membresias m ON p.MembresiaID = m.MembresiaID
WHERE 
    p.FechaExpiracion > CURRENT_DATE
ORDER BY 
    p.FechaExpiracion DESC;
